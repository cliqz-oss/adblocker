diff --git a/bench/comparison/ublock/hntrie.js b/bench/comparison/ublock/hntrie.js
index 07fbc5a..183a388 100644
--- a/bench/comparison/ublock/hntrie.js
+++ b/bench/comparison/ublock/hntrie.js
@@ -22,6 +22,9 @@
 /* globals WebAssembly */
 /* exported HNTrieContainer */
 
+const fs = require('fs');
+const path = require('path');
+
 'use strict';
 
 /*******************************************************************************
@@ -639,7 +642,7 @@ HNTrieContainer.prototype.HNTrieRef.prototype = {
 // The WASM module is entirely optional, the JS implementations will be
 // used should the WASM module be unavailable for whatever reason.
 
-(function() {
+µBlock.HNTrieContainerReadyPromise = (function() {
     HNTrieContainer.wasmModulePromise = null;
 
     // Default to javascript version.
@@ -648,9 +651,9 @@ HNTrieContainer.prototype.HNTrieRef.prototype = {
 
     if (
         typeof WebAssembly !== 'object' ||
-        typeof WebAssembly.compileStreaming !== 'function'
+        typeof WebAssembly.compile !== 'function'
     ) {
-        return;
+        return Promise.reject();
     }
 
     // Soft-dependency on vAPI so that the code here can be used outside of
@@ -659,7 +662,7 @@ HNTrieContainer.prototype.HNTrieRef.prototype = {
         typeof vAPI === 'object' &&
         vAPI.webextFlavor.soup.has('firefox') === false
     ) {
-        return;
+        return Promise.reject();
     }
 
     // Soft-dependency on µBlock's advanced settings so that the code here can
@@ -668,7 +671,7 @@ HNTrieContainer.prototype.HNTrieRef.prototype = {
         typeof µBlock === 'object' &&
         µBlock.hiddenSettings.disableWebAssembly === true
     ) {
-        return;
+        return Promise.reject();
     }
 
     // The wasm module will work only if CPU is natively little-endian,
@@ -678,26 +681,12 @@ HNTrieContainer.prototype.HNTrieRef.prototype = {
     uint32s[0] = 1;
     if ( uint8s[0] !== 1 ) { return; }
 
-    // The directory from which the current script was fetched should also
-    // contain the related WASM file. The script is fetched from a trusted
-    // location, and consequently so will be the related WASM file.
-    let workingDir;
-    {
-        const url = new URL(document.currentScript.src);
-        const match = /[^\/]+$/.exec(url.pathname);
-        if ( match !== null ) {
-            url.pathname = url.pathname.slice(0, match.index);
-        }
-        workingDir = url.href;
-    }
-
-    HNTrieContainer.wasmModulePromise = fetch(
-        workingDir + 'wasm/hntrie.wasm',
-        { mode: 'same-origin' }
-    ).then(
-        WebAssembly.compileStreaming
+    HNTrieContainer.wasmModulePromise = WebAssembly.compile(
+        fs.readFileSync(path.resolve(__dirname, './wasm/hntrie.wasm')),
     ).catch(reason => {
         HNTrieContainer.wasmModulePromise = null;
         log.info(reason);
     });
+
+    return HNTrieContainer.wasmModulePromise;
 })();
