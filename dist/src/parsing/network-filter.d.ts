import { RequestType } from '../request';
import IFilter from './interface';
export declare class NetworkFilter implements IFilter {
    mask: number;
    filter?: string;
    optDomains?: Uint32Array;
    optNotDomains?: Uint32Array;
    redirect?: string;
    hostname?: string;
    id?: number;
    rawLine?: string;
    optDomainsSet?: Set<number>;
    optNotDomainsSet?: Set<number>;
    private fuzzySignature?;
    private regex?;
    constructor({ mask, filter, hostname, optDomains, optNotDomains, redirect, rawLine, }: {
        mask: number;
        filter?: string;
        optDomains?: Uint32Array;
        optNotDomains?: Uint32Array;
        redirect?: string;
        hostname?: string;
        rawLine?: string;
    });
    isCosmeticFilter(): boolean;
    isNetworkFilter(): boolean;
    toString(): string;
    getId(): number;
    hasFilter(): boolean;
    hasOptNotDomains(): boolean;
    getNumberOfOptNotDomains(): number;
    getOptNotDomains(): Set<number>;
    getNumberOfOptDomains(): number;
    hasOptDomains(): boolean;
    getOptDomains(): Set<number>;
    getMask(): number;
    getCptMask(): number;
    isRedirect(): boolean;
    getRedirect(): string;
    hasHostname(): boolean;
    getHostname(): string;
    getFilter(): string;
    setRegex(re: RegExp): void;
    getRegex(): RegExp;
    getFuzzySignature(): Uint32Array;
    getTokens(): Uint32Array[];
    isCptAllowed(cpt: RequestType): boolean;
    isFuzzy(): boolean;
    isException(): boolean;
    isHostnameAnchor(): boolean;
    isRightAnchor(): boolean;
    isLeftAnchor(): boolean;
    matchCase(): boolean;
    isImportant(): boolean;
    isRegex(): boolean;
    isPlain(): boolean;
    fromAny(): boolean;
    thirdParty(): boolean;
    firstParty(): boolean;
    fromImage(): boolean;
    fromMedia(): boolean;
    fromObject(): boolean;
    fromOther(): boolean;
    fromPing(): boolean;
    fromScript(): boolean;
    fromStylesheet(): boolean;
    fromSubdocument(): boolean;
    fromWebsocket(): boolean;
    fromHttp(): boolean;
    fromHttps(): boolean;
    fromXmlHttpRequest(): boolean;
    fromFont(): boolean;
}
export declare function parseNetworkFilter(rawLine: string): NetworkFilter | null;
